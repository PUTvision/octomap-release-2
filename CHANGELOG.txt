v1.4.2: 2012-04-24
===================
- extended graph2tree with more verbose logging / statistics
- fixed conversion from color .ot to .bt in convert_octree
- minor fixes in octovis with color rendering 
- fixed octovis compilation witg Qt 4.8 (Ubuntu 12.04)
- experimental editing functionality in octovis to clear and fill volumes

v1.4.1: 2012-03-12
===================
- added stack.yaml for release in ROS with catkin

v1.4: 2012-02-22
===================
 - New generalized file IO for all kinds of OcTrees to .ot files. The updated
 	file format requires a conversion of your old bt and ot files with the 
 	"convert_octree" tool. bt files are read and written as before. 
 	To write the general .ot file format use tree.write(...) and read it with 
 	AbstractOcTree::read(...) as factory (dynamic_cast to the correct class 
 	afterwards).
 - New ColorOcTree class to store color in addition to occupancy 
	(e.g. from Kinect), with visualization in octovis
 - New map collections of octrees (hierarchical octree maps, experimental)
 - Support for Linux, Mac OSX, and Windows
 - enhancements and fixes in changeDetection
 - minor fixes and unit tests added

v1.2: 2011-08-17
===================
 - divided code into a library (octomap) and visualization part (octvis) to 
	remove dependencies on Qt / OpenGL from library. Both can be built 
	independently or as a complete package.
 - iterators for fast and flexible tree access (check doxygen of OcTreeBase::
	 iterator) are the preferred way to traverse tree nodes now
 - improved speed of map update / scan insertion. A further speedup is possible
	when using the "lazy evaluation" flag for batch insertion
 - unit tests based on CTest ("make test")
 - CMake improvements: new targets "dist" (build package) and "uninstall",
	dynamic and static libs are built. CMake package config to ease integration 
	into other CMake-based systems (install octomap globally, or set the 
	environment variable octomap_DIR to your OctoMap location
 - occupancy and sensor parameters are now a property of the tree and not the
	nodes. Use e.g. tree->isNodeOccupied(node) instead of node->isOccupied()
 - cleanup of OcTree and OccupancyOcTree: the latter now holds most of the 
	implementation to ease deriving own tree and node types. 
        See OcTreeStamped for an example.
 - debug output is now muted when not compiling as "Debug", ROS logging levels
	are used when compiled in ROS
 - experimental change detection in occupancy octrees 
 - bugfixes and general compatibility improvements


v1.0: 2011-03-15
===================
 - cleanup of insertScan methods
 - key-based raycasting with pre-allocated KeyRay
 - speedup and cleanup of math, inlining


v0.8: 2010-11-16
===================
 - improved speed of map update / scan insertion 
 - improved speed of map queries (isOccupied / castRay)
 - key-based computations to improve numerical stability and efficiency 
